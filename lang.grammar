lang -> expr*
expr -> EXPR_IF_ELSE | EXPR_CYCLE | EXPR_ASSIGN | EXPR_PRINT | LIB_CREATE | METHOD_CALL




LIB_CREATE -> LIB SPACE_NAME LIST VAR

METHOD_CALL -> VAR DOT VAR L_BRACKET PARAMETERS R_BRACKET
PARAMETERS -> VALUE? (ENUM_SEPARATE VALUE)*






EXPR_ASSIGN -> VAR ASSIGN_OP VALUE (OP VALUE)*
EXPR_CYCLE -> EXPR_WHILE | EXPR_FOR

VALUE -> FORMULA
FORMULA  -> FORMULA2 | FORMULA3
FORMULA2 -> (VAR | DIGIT | STRING) (OP FORMULA2 | FORMULA3)*
FORMULA3 -> L_BRACKET FORMULA R_BRACKET

a = a + b + (c + d)


EXPR_PRINT -> PRINT L_BRACKET VALUE | METHOD_CALL R_BRACKET


EXPR_WHILE -> WHILE L_BRACKET EXPR_PREDICATE R_BRACKET L_BRACER EXEC_BLOCK R_BRACER
EXPR_PREDICATE -> BOOL | VALUE (CONDITIONAL_OP VALUE)*
EXEC_BLOCK -> expr*

while (a < b) {
    a = a + 1
}


EXPR_IF_ELSE -> IF L_BRACKET EXPR_PREDICATE R_BRACKET L_BRACER EXEC_BLOCK R_BRACER EXPR_ELIF* | EXPR_ELSE{1,0}
EXPR_PREDICATE -> BOOL | EXPR_DEF | (VALUE CONDITIONAL_OP VALUE)
EXPR_ELIF -> EXPR_ELIF L_BRACKET EXPR_PREDICATE R_BRACKET L_BRACER EXEC_BLOCK EXPR_ELIF* R_BRACER
EXPR_ELSE -> ELSE EXEC_BLOCK

if (a == b) {
    a = 0
} elif (a < b) {
    a = b
} else {
	b = 0
}
